# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import  Router, F
from aiogram.exceptions import TelegramNotFound, TelegramAPIError
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.formatting import as_marked_section, Bold
from dotenv import load_dotenv, find_dotenv
# –ú–æ–¥–µ–ª–∏ –∏ ORM –∑–∞–ø—Ä–æ—Å—ã
from database.models import User, SupportTicket
from database.orm_query import orm_get_products
from database.orm_query_blacklist import is_blacklisted
from database.orm_query_trial_product import get_trial_products
from database.orm_query_trial_users import get_trial_subscription_info
# –§–∏–ª—å—Ç—Ä—ã
from filters.chat_types import ChatTypeFilter
# –ö–Ω–æ–ø–∫–∏
from kbds.reply import get_keyboard
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.admin_operations import ADMIN_LIST
from handlers.user_private_operations import *
from handlers.payment_handlers import *
from handlers.trial_period import process_trial_subscription


# # –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
# from aiogram import types, Router, F
# from aiogram.exceptions import TelegramAPIError, TelegramNotFound
# from aiogram.fsm.context import FSMContext
# from aiogram.filters import CommandStart, Command, or_f, StateFilter
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.types import ReplyKeyboardRemove, FSInputFile
# from aiogram.utils.formatting import as_marked_section, Bold
# from dotenv import load_dotenv, find_dotenv
# from sqlalchemy import select
# from sqlalchemy.ext.asyncio import AsyncSession
#
# from bot_instance import bot
# from common.bot_cmds_list import private
# # –ú–æ–¥–µ–ª–∏ –∏ ORM –∑–∞–ø—Ä–æ—Å—ã
# from database.models import User, SupportTicket
# from database.orm_query import orm_get_products
# from database.orm_query_trial_product import get_trial_products
# from database.orm_query_trial_users import get_trial_subscription_info
# # –§–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
# from filters.chat_types import ChatTypeFilter
# from handlers.admin_operations import ADMIN_LIST
# from handlers.user_private_operations import get_subscription_info, send_config_and_qr_button
# from kbds.inline import get_inlineMix_btns
# from kbds.reply import get_keyboard
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# from handlers.payment_handlers import pay, process_pre_checkout_query, process_successful_payment
# from handlers.trial_period import process_trial_subscription


load_dotenv(find_dotenv())
user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if await is_blacklisted(session, message.from_user.id):
        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    await state.clear()
    bot_info = await bot.get_me()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üëã\n\n"
        f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞—à–µ–º {bot_info.username}. üåê –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö üá≥üá±.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º, –∞ –º—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. üîê‚ö°\n\n"
        f"–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–º–æ—â—å ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode='HTML',
        reply_markup=get_keyboard(
            "üíº –¢–∞—Ä–∏—Ñ—ã",
            "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2, 1),
        ),
    )


@user_private_router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        trial_info = await get_trial_subscription_info(user_id, session)

        if "–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ" in trial_info:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            dashboard = await get_subscription_info(user_id, session)
            if "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" in dashboard:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                await message.answer("<b>–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</b>",parse_mode='HTML')
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                if "–ê–∫—Ç–∏–≤–Ω–∞" in dashboard:
                    await message.answer(dashboard,parse_mode='HTML')
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏
                    await send_config_and_qr_button(message, user_id)
                else:
                    await message.answer("<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.</b>",parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ TrialUser
            await message.answer(trial_info)
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if "–ê–∫—Ç–∏–≤–Ω–∞" in trial_info:
                await send_config_and_qr_button(message, user_id)
            else:
                await message.answer("–í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: {e}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
@user_private_router.message(F.text == "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
async def trial_period_cmd(message: types.Message, session: AsyncSession):
    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ ‚¨áÔ∏è")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    trial_products = await get_trial_products(session)

    if not trial_products:
        # –ï—Å–ª–∏ –ø—Ä–æ–±–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç
        await message.answer("–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç ‚ùå")
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    for product in trial_products:
        print(product.id)
        await message.answer(
            f'<strong>{product.name}</strong>\n'
            f'–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {product.count_day}\n',
            reply_markup=get_inlineMix_btns(btns={
                '–ü–æ–¥–∫–ª—é—á–∏—Ç—å': f'pay_trial_{product.id}',  # Callback —Å ID –ø—Ä–æ–¥—É–∫—Ç–∞
                '–ù–∞–∑–∞–¥': 'menu_',  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            }),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
@user_private_router.callback_query(F.data.startswith('pay_trial_'))
async def pay_trial_handler(callback: types.CallbackQuery, session: AsyncSession):
    await process_trial_subscription(callback, session)
    await callback.answer()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user_private_router.callback_query(F.data == 'menu_')
async def back_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback_query.message.answer(
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>',
        parse_mode='HTML',
        reply_markup=get_keyboard(
            "üíº –¢–∞—Ä–∏—Ñ—ã",  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
            "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",  # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",  # –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞",  # –ü–æ–º–æ—â—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2, 1),  # –õ–æ–≥–∏—á–µ—Å–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ: 2 –≤–µ—Ä—Ö–Ω–∏—Ö, 2 –Ω–∏–∂–Ω–∏—Ö, 1 –ø–æ—Å–ª–µ–¥–Ω—è—è
        ),
    )

# –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
@user_private_router.message(F.text == "üíº –¢–∞—Ä–∏—Ñ—ã")
async def menu_cmd(message: types.Message, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = message.from_user.id
    query = select(User).where(User.user_id == user_id)
    result = await session.execute(query)
    existing_user = result.scalar()

    for product in await orm_get_products(session):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        button_text = '–ü—Ä–æ–¥–ª–∏—Ç—å' if existing_user else '–ö—É–ø–∏—Ç—å'

        await message.answer(
            f'<strong>{product.name}</strong>\n'
            f'–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n',
            # f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {product.count_day}',
            reply_markup=get_inlineMix_btns(btns={
                button_text: f'pay_{product.id}',
                '–ü–æ–¥—Ä–æ–±–Ω–µ–µ': f'change_{product.id}'
            })
        )

# –û —Å–µ—Ä–≤–µ—Ä–µ
class SupportStates(StatesGroup):
    waiting_for_support_message = State()

@user_private_router.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_start(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è",
        reply_markup=get_inlineMix_btns(
            btns={
                "üõ†Ô∏è –û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É": "describe_problem",
                "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã": "frequent_questions",
            },
            sizes=(1, 1)  # –ö–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
        )
    )
@user_private_router.callback_query(F.data.startswith("describe_problem"))
async def handle_describe_problem(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å.")
    await state.set_state(SupportStates.waiting_for_support_message)


@user_private_router.message(StateFilter(SupportStates.waiting_for_support_message))
async def handle_support_message(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_id = message.from_user.id
    username = message.from_user.username
    issue_description = message.text

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã?\n\n"
        f"<b>{issue_description}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_inlineMix_btns(btns={
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å": "confirm_issue",
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å": "cancel_issue",
        })
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(issue_description=issue_description)


@user_private_router.callback_query(F.data == "confirm_issue")
async def confirm_issue(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_data = await state.get_data()
    issue_description = user_data.get("issue_description")
    user_id = callback.from_user.id
    username = callback.from_user.username

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        ticket = SupportTicket(
            user_id=user_id,
            username=username,
            issue_description=issue_description
        )
        session.add(ticket)
        await session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>{ticket.id}</b>. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        for admin_id in ADMIN_LIST:
            await bot.send_message(
                admin_id,
                f"üîî –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id} –æ—Ç @{username} (ID: {user_id}):\n\n{issue_description}\n\n"
                f"–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∏–∫–µ—Ç–∞–º–∏.",
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


@user_private_router.callback_query(F.data == "cancel_issue")
async def cancel_issue(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await callback.message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã.")
    await state.clear()


@user_private_router.callback_query(F.data.startswith("frequent_questions"))
async def handle_faq(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    faq_text = (
        "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "1. –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN?\n"
        "   - –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
        "2. –ö–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
        "   - –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ 1 –º–µ—Å—è—Ü, 3 –º–µ—Å—è—Ü–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ '–¢–∞—Ä–∏—Ñ—ã'.\n\n"
        "3. –ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–µ—Ä–≤–µ—Ä—ã?\n"
        "   - –ù–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö üá≥üá±, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "4. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?\n"
        "   - –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'.\n\n"
        "5. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ?\n"
        "   - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.\n\n"
        "6. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º?\n"
        "   - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª '–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É'. –ú—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏–º –≤–∞—à—É –∑–∞–¥–∞—á—É.\n\n"
        "7. –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏?\n"
        "   - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "8. –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
        "   - –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–¢–∞—Ä–∏—Ñ—ã'."
    )

    await callback.message.answer(faq_text)

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
# @user_private_router.message(F.text.lower() == "—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã")
# @user_private_router.message(Command("payment"))
# async def payment_cmd(message: types.Message):
#     text = as_marked_section(
#         Bold("–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:"),
#         "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
#         "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∞/–∫–µ—à",
#         "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
#         marker="‚úÖ ",
#     )
#     await message.answer(text.as_html())

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@user_private_router.message(F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def send_instructions(message: types.Message):
    url = 'https://jacksmiie.github.io/LockNet/'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Å—Å—ã–ª–∫—É
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ <a href="{url}">—Å—Å—ã–ª–∫–µ</a>.', parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã FSM
@user_private_router.callback_query(F.data.startswith('pay_'))
async def payment_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await pay(callback, session, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@user_private_router.pre_checkout_query()
async def process_pay(pre_checkout_query: types.PreCheckoutQuery, state: FSMContext):
    await process_pre_checkout_query(pre_checkout_query, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@user_private_router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, state: FSMContext, session: AsyncSession):
    await process_successful_payment(message, state, session)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å qr_code
@user_private_router.callback_query(F.data.startswith('qr_'))
async def send_qr(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    qr_path = f"/home/jacksmile/PycharmProjects/vpn_bot_v1.1/users_configs/qr_png/qr_{user_id}.png"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        photo = FSInputFile(qr_path)
        await callback.message.answer_photo(photo=photo)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
@user_private_router.message(~F.text)
async def allow_text_only(message: types.Message):
    try:
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    except TelegramNotFound:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        pass
    except TelegramAPIError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ Telegram API
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



