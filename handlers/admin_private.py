from itertools import product

from aiogram import Router, types, F
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.admin_operations import AdminStates, process_remove_admin_id

from database.orm_query import orm_add_product, orm_get_products, orm_delete_product, count_products, \
    count_promotion_products
from database.orm_query_blacklist import get_all_blacklisted_users, add_to_blacklist, count_blacklist_users, \
    add_user_to_blacklist, remove_user_from_blacklist
from database.orm_query_free_user import count_free_users
from database.orm_query_trial_product import get_trial_products, add_trial_product, delete_trial_product, \
    count_trial_products
from database.orm_query_trial_users import count_trial_users
from database.orm_query_users import orm_count_users_with_true_status, count_inactive_users, count_total_users,orm_get_users
from filters.chat_types import ChatTypeFilter, IsAdmin
from handlers.admin_operations import add_admin, remove_admin, list_admins, process_admin_id
from kbds.inline import get_inlineMix_btns, get_callback_btns
from kbds.reply import get_keyboard


ADMIN_KB = get_keyboard(
    "üì¶ –¢–æ–≤–∞—Ä—ã",            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    "üö´ –ß–°",                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",      # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",      # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(3, 2),         # –†–∞–∑–º–µ—Ä—ã –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
)

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(Command("admin"))
async def admin_features(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)
#-----------------
"""–ß–°"""

# –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞(—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
class TextInputStates(StatesGroup):
    waiting_for_text = State()

@admin_router.message(F.text.lower() == '—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
async def show_blacklist(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    users = await get_all_blacklisted_users(session)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if users:
        blacklist_info = "\n".join(
            [f"ID: {user.user_id}, Username: {user.username}, –ü—Ä–∏—á–∏–Ω–∞: {user.reason}" for user in users]
        )
        await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n{blacklist_info}")
    else:
        await message.answer("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

# –í–Ω–µ—Å—Ç–∏ –≤ –ß–°
@admin_router.message(F.text.lower() == "–≤–Ω–µ—Å—Ç–∏ –≤ —á—Å")
async def start_blacklist_process(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏ <b>–ø—Ä–∏—á–∏–Ω—É</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. <b>–ü—Ä–∏–º–µ—Ä</b>: 424629424, –ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
        parse_mode='HTML',
        reply_markup=get_inlineMix_btns(btns={
            '–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°': 'add_to_blacklist_',
            '–û—Ç–º–µ–Ω–∞': 'cancel_handler_',
        })
    )

@admin_router.callback_query(F.data.startswith('add_to_blacklist_'))
async def process_blacklist_input(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏ <b>–ø—Ä–∏—á–∏–Ω—É</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. <b>–ü—Ä–∏–º–µ—Ä</b>: 424629424, –ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
        parse_mode='HTML'
    )
    await state.set_state(TextInputStates.waiting_for_text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

@admin_router.message(TextInputStates.waiting_for_text)
async def handle_blacklist_input(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—è—Ç–æ–π –≤ —Ç–µ–∫—Å—Ç–µ
        if ',' not in message.text:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: 424629424, –ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ")
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ ID –∏ –ø—Ä–∏—á–∏–Ω—É
        user_id_str, reason = map(str.strip, message.text.split(',', maxsplit=1))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
        if not user_id_str.isdigit():
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        user_id = int(user_id_str)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await add_to_blacklist(session, user_id, reason)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.",reply_markup=ADMIN_KB)
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()


@admin_router.callback_query(StateFilter("*"),F.data == "cancel_handler_")
async def cancel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if await state.get_state():
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)
    else:
        await callback_query.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
#--------------


# –ü–æ–∫–∞–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
@admin_router.message(F.text == 'üì¶ –¢–æ–≤–∞—Ä—ã')
async def menu_cmd(message: types.Message, session: AsyncSession):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', reply_markup=get_inlineMix_btns(btns={
        '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä': '–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä_',
        '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é': '–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é_',
        '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' : '–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥_',
        '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_',
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': '–Ω–∞–∑–∞–¥_'
    }),parse_mode='HTML')

@admin_router.callback_query(F.data.startswith('–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥_'))
async def trial_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
    await callback_query.message.answer('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=get_inlineMix_btns(btns={
        '–ü—Ä–æ—Å–º–æ—Ç—Ä': 'show_trial_',
        '–î–æ–±–∞–≤–∏—Ç—å': 'add_trial_',
    }))
# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
@admin_router.callback_query(F.data.startswith('delete_trial_'))
async def delete_trial_product_callback(callback_query: types.CallbackQuery, session: AsyncSession):
    try:
        # –ü–µ—á–∞—Ç–∞–µ–º callback_query.data –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {callback_query.data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ callback_data
        data = callback_query.data.split('_')[-1]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            product_id = int(data)
        except ValueError:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞ ({data}).")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        deleted_product = await delete_trial_product(session, product_id)

        if deleted_product:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω
            await callback_query.message.answer(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            await callback_query.message.answer(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
@admin_router.callback_query(F.data.startswith('show_trial_'))
async def trial_period_callback(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        products = await get_trial_products(session)

        if not products:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await callback_query.message.answer('–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for product in products:
            response_message = (f"<strong>{product.name}</strong>\n"
                                 f"–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {product.count_day}\n\n")
            await callback_query.message.answer(response_message, reply_markup=get_inlineMix_btns(btns={
                '–£–¥–∞–ª–∏—Ç—å': f"delete_trial_{product.id}"
            }))

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
class ProductState(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_days = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
@admin_router.callback_query(F.data.startswith('add_trial_'))
async def add_trial_product_callback(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        existing_products = await get_trial_products(session)

        if len(existing_products) >= 1:
            # –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer(
                "<b>–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω.</b>",parse_mode='HTML')
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.set_state(ProductState.waiting_for_product_name)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(ProductState.waiting_for_product_name)
async def process_product_name(message: types.Message, state: FSMContext, session: AsyncSession):
    product_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
    if not product_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_name=product_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    await state.set_state(ProductState.waiting_for_product_days)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@admin_router.message(ProductState.waiting_for_product_days)
async def process_product_days(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        count_day = int(message.text.strip())
        if count_day <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    product_name = user_data.get("product_name")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        new_product = await add_trial_product(session, product_name, count_day)
        await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç <strong>{new_product.name}</strong> —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–∞ {new_product.count_day} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
@admin_router.callback_query(F.data.startswith('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_'))
async def menu_cmd(callback_query: types.CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = await orm_get_products(session)

    if not products:
        await callback_query.message.answer('–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.')
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "–ê–∫—Ü–∏—è" –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    action_products = [product for product in products if '–ê–∫—Ü–∏—è' in product.name]
    other_products = [product for product in products if '–ê–∫—Ü–∏—è' not in product.name]
    other_products = sorted(other_products, key=lambda p: p.name.lower())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å "–ê–∫—Ü–∏—è"
    if action_products:
        for product in action_products:
            response_message = (f"<strong>{product.name}</strong>\n"
                                 f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                                 f"–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {product.count_day}\n\n")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å "–ê–∫—Ü–∏—è" –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await callback_query.message.answer(
                response_message,
                reply_markup=get_inlineMix_btns(btns={
                    '–£–¥–∞–ª–∏—Ç—å': f'delete_{product.id}',
                    '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_'
                })
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    if other_products:
        for product in other_products:
            response_message = (f"<strong>{product.name}</strong>\n"
                                 f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                                 f"–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {product.count_day}\n\n")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await callback_query.message.answer(
                response_message,
                reply_markup=get_inlineMix_btns(btns={
                    '–£–¥–∞–ª–∏—Ç—å': f'delete_{product.id}',
                    '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_'
                })
            )

    await callback_query.message.answer('–û–∫, –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å ‚¨ÜÔ∏è')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    product_id = int(callback.data.split('_')[-1])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await orm_delete_product(session, product_id)

    # –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', reply_markup=get_inlineMix_btns(btns={
        '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_',
        '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_',
    }))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', reply_markup=get_inlineMix_btns(btns={
        '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_',
        '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_',

    }))

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_router.message(or_f(Command("change"), F.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä'))
async def change_price(message: types.Message):
    await message.answer('–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class AddProduct(StatesGroup):
    name = State()
    count_day = State()
    price = State()

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data.startswith('–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä_'))
async def admin_add(callback: types.CallbackQuery, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' –Ω–∞–∂–∞—Ç–∞")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProduct.name)

@admin_router.callback_query(F.data.startswith('–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é_'))
async def admin_add(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    promotion = await orm_get_products(session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å –∏–º–µ–Ω–µ–º "–ê–∫—Ü–∏—è"
    existing_promotion = next((product for product in promotion if product.name.lower() == "–∞–∫—Ü–∏—è"), None)

    if existing_promotion:
        # –ï—Å–ª–∏ –∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await callback.message.answer(
            '–ê–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é.')
        await state.clear()  # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    else:
        # –ï—Å–ª–∏ –∞–∫—Ü–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        await state.update_data(name="–ê–∫—Ü–∏—è")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ü–∏–∏:", reply_markup=get_inlineMix_btns(btns={
            '–û—Ç–º–µ–Ω–∞' : '–Ω–∞–∑–∞–¥_'
        }))
        await state.set_state(AddProduct.count_day)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
@admin_router.message(StateFilter("*"), or_f(Command("–æ—Ç–º–µ–Ω–∞"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞"))
async def cancel_handler(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=ADMIN_KB)


# –ö–æ–º–∞–Ω–¥–∞ "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
@admin_router.message(StateFilter("*"), or_f(Command("–Ω–∞–∑–∞–¥"), F.text.casefold() == "–Ω–∞–∑–∞–¥"))
async def back_step_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AddProduct.count_day.state:
        await state.set_state(AddProduct.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ:")
    elif current_state == AddProduct.price.state:
        await state.set_state(AddProduct.count_day)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ:")
    else:
        await message.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AddProduct.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(AddProduct.count_day)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
@admin_router.message(AddProduct.count_day, F.text)
async def add_count_day(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π!")
        return
    await state.update_data(count_day=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.price)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@admin_router.message(AddProduct.price, F.text)
async def add_price(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        price = float(message.text)
        if price < 80:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 80!")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!")
        return

    await state.update_data(price=price)
    data = await state.get_data()

    try:
        await orm_add_product(session, data)
        await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",reply_markup=get_inlineMix_btns(btns={
            '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç': '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç_',
            '–ù–∞–∑–∞–¥': '–Ω–∞–∑–∞–¥_'
        }))

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_router.callback_query(F.data == '–Ω–∞–∑–∞–¥_')
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=ADMIN_KB)

# @admin_router.callback_query(F.data == '–Ω–∞–∑–∞–¥')
# async def back_to_menu(callback_query: types.CallbackQuery):
#     await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=ADMIN_KB)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
@admin_router.message(or_f(F.text.lower() == '–≤—ã—Ö–æ–¥', F.text.lower() == '–æ—Ç–º–µ–Ω–∞'))
async def admin_exit(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=ADMIN_KB)


@admin_router.message(F.text.lower() == '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def count_active_users(message: types.Message, session: AsyncSession):
    count = await orm_count_users_with_true_status(session)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True): {count}", reply_markup=ADMIN_KB)

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@admin_router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def statistic(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = await orm_count_users_with_true_status(session)

    # –ü–æ–¥—Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    trial_users = await count_trial_users(session)
    # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    black_list = await count_blacklist_users(session)
    # –ü–æ–¥—Å—á–µ—Ç –∫–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    count_product = await count_products(session)
    # –ü–æ–¥—Å—á–µ—Ç –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    free_users = await count_free_users(session)
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ-–≤–∞ –ê–∫—Ü–∏–π
    trial_product = await count_trial_products(session)
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    inactive_users_count = await count_inactive_users(session)
    # –ü—Ä–æ–¥—É–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∞–∫—Ü–∏—è
    promotion_product = await count_promotion_products(session)
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users_count = await count_total_users(session)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = (
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {active_users}\n"
        f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {inactive_users_count}\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {total_users_count}\n"
        f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ : {free_users}\n"
        f"–ö–ª–∏–µ–Ω—Ç—ã —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º : {trial_users}\n" # –æ—Ç—Å —Ç—É—Ç 
        f"–ö–ª-–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ : {count_product}\n"
        f"–ö–ª-–≤–æ –ê–∫—Ü–∏–π : {promotion_product}\n"
        f"–ü—Ä–æ–±–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç(–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ = 1) : {trial_product}\n"
        f"–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ :{black_list}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer(stats_message)

"""–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ß–°)"""
@admin_router.message(F.text == 'üö´ –ß–°')
async def black_list(message: types.Message, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=get_inlineMix_btns(btns={
        '–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤(–ß–°)': 'get_users_',
        '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞': 'add_users_',
        '–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞': 'dell_users_',

    }))
# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ß–°
@admin_router.callback_query(F.data == 'get_users_')
async def delete_user_from_blacklist(callback_query: types.CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        users_list = await get_all_blacklisted_users(session)
        if not users_list:
            await callback_query.message.answer("<b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>",parse_mode='HTML')
            return

        for user in users_list:
            formatted_user = f"ID: {user.user_id}, Username: {user.username or '–ù–µ—Ç –∏–º–µ–Ω–∏'}"

            await callback_query.message.answer(formatted_user)


    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")



# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ß–°
@admin_router.callback_query(F.data == 'dell_users_')
async def delete_user_from_blacklist(callback_query: types.CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        users_list = await get_all_blacklisted_users(session)

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not users_list:
            await callback_query.message.answer("<b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>",parse_mode='HTML')
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users_list:
            formatted_user = f"ID: {user.user_id}, Username: {user.username or '–ù–µ—Ç –∏–º–µ–Ω–∏'}"
            callback_data = f'dellUser_{user.user_id}_{user.username}'

            buttons = get_inlineMix_btns(btns={
                '–£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°': callback_data
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ß–°
            await callback_query.message.answer(formatted_user, reply_markup=buttons)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ß–°
@admin_router.callback_query(F.data.startswith('dellUser_'))
async def remove_user_from_blacklist_handler(callback_query: types.CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = callback_query.data.split('_')
        if len(data) < 3:
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_id = int(data[1])  # user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        username = '_'.join(data[2:])  # username ‚Äî —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ user_id

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ß–° –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, Username={username}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        result = await remove_user_from_blacklist(session, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
        await callback_query.answer(result)
        if "—É—Å–ø–µ—à–Ω–æ" in result:
            await callback_query.message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {result}")


    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ß–°: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")



# –í—ã–≤–æ–¥–∏—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°
@admin_router.callback_query(F.data == 'add_users_')
async def black_list_users(callback_query: types.CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = await orm_get_users(session)

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not users_list:
            await callback_query.message.answer("<b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.</b>",parse_mode='HTML')
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users_list:
            formatted_user = f"ID: {user.user_id}, Username: {user.username or '–ù–µ—Ç –∏–º–µ–Ω–∏'}"
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data —Å –ø–µ—Ä–µ–¥–∞—á–µ–π user_id –∏ username
            callback_data = f'addUser_{user.user_id}_{user.username}'

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            buttons = get_inlineMix_btns(btns={
                '–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°': callback_data
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.message.answer(formatted_user, reply_markup=buttons)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –î–æ–±–∞–≤–∏—Ç—å
@admin_router.callback_query(F.data.startswith('addUser_'))
async def add_user_black(callback: types.CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = callback.data.split('_')
        if len(data) < 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 'addUser_<user_id>_<username>'.")
            return

        user_id = int(data[1])  # user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        username = '_'.join(data[2:])  # username ‚Äî —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ user_id

        # –ï—Å–ª–∏ username –ø—É—Å—Ç–æ–π, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if not username:
            username = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        # –õ–æ–≥–∏—Ä—É–µ–º username –∏ user_id
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ß–° –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, Username={username}")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
        await add_to_blacklist(callback.message, session, user_id, username)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ß–°: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")


"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"""
@admin_router.message(F.text == 'üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã')
async def admin_panel(message: types.Message, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=get_inlineMix_btns(btns={
        '–î–æ–±–∞–≤–∏—Ç—å': 'addAdmin_',
        '–£–¥–∞–ª–∏—Ç—å': 'removeAdmin_',
        '–°–ø–∏—Å–æ–∫': 'listAdmins_',
    }))
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.callback_query(F.data.startswith('addAdmin_'))
async def handle_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await add_admin(callback_query,state)
@admin_router.message(AdminStates.waiting_for_admin_id)
async def process_admin_id_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await process_admin_id(message, state)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=ADMIN_KB)

# –£–¥–∞–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.callback_query(F.data.startswith('removeAdmin_'))
async def handle_remove_admin(callback_query: types.CallbackQuery,state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await remove_admin(callback_query,state)

@admin_router.message(AdminStates.waiting_dell_for_admin_id)
async def process_admin_id_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await process_remove_admin_id(message, state)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=ADMIN_KB)


# –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@admin_router.callback_query(F.data.startswith('listAdmins_'))
async def handle_list_admins(callback_query: types.CallbackQuery):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await list_admins(callback_query)